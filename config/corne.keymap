/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Myers Studio Ltd.
 *
 * SPDX-License-Identifier: MIT
 */

/*
  TODO:
  * Function keys.
  * Media keys.
  * Escape.
  * Lock.
  * Less drastic keys for layers.
  * Ergonomic modifier keys.
  
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// --------------------------------------------------------------------
// |  Q  |  W  |  E   |  R   |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D   |  F   |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C   |  V   |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             | SHFT | CTRL | SPC |   | ENT | ALT  |  '  |
                        bindings = <
   &none   &kp Q &kp W &kp E          &kp R          &kp T                   &kp Y         &kp U          &kp I     &kp O   &kp P    &none
   &none   &kp A &kp S &kp D          &kp F          &kp G                   &kp H         &kp J          &kp K     &kp L   &kp SEMI &none
   &none   &kp Z &kp X &kp C          &kp V          &kp B                   &kp N         &kp M          &kp COMMA &kp DOT &kp FSLH &none
                       &mt LSHIFT TAB &mt LCTRL LGUI &lt LOWER SPACE         &lt RAISE RET &mt LALT BKSP  &kp APOS
                        >;
                };

                lower_layer {
// ----------------------------------------------------------------------
// |  1     |  2  |  3   |  4   |  5  |   |  6  |  7  |  8  |  9  |  0  |
// | BT1    | BT2 | BT3  | BT4  | BT5 |   | LFT | DWN |  UP | RGT |     |
// | BT_CLR |     |      |      |     |   |     |     |     |     |     | 
//                | SHFT | CTRL | SPC |   | ENT | ALT | ' |
                        bindings = <
   &none  &kp N1       &kp N2       &kp N3         &kp N4         &kp N5                &kp N6   &kp N7        &kp N8   &kp N9    &kp N0  &none
   &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4          &kp LEFT &kp DOWN      &kp UP   &kp RIGHT &kp DOT &none
   &none  &bt BT_CLR   &trans       &trans         &trans         &trans                &trans   &trans        &trans   &trans    &trans  &none
                                    &mt LSHIFT TAB &mt LCTRL LGUI &kp SPACE             &kp RET  &mt LALT BKSP &kp APOS
          
                        >;
                };

                raise_layer {
// -------------------------------------------------------------------
// |  !  |  @  |  #   |  $   |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |  `  |     |      |      |     |   |  -  |  =  |  [  |  ]  |  \  |
// |     |     |      |      |     |   |  _  |  +  |  {  |  }  | "|" |
//             | SHFT | CTRL | SPC |   | ENT | ALT | ' |
                        bindings = <
   &none  &kp EXCL  &kp AT &kp HASH         &kp DLLR       &kp PRCNT             &kp CARET &kp AMPS      &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none  &kp GRAVE &trans &trans           &trans         &trans                &kp MINUS &kp EQUAL     &kp LBKT        &kp RBKT &kp BSLH &none
   &none  &trans    &trans &trans           &trans         &trans                &kp UNDER &kp PLUS      &kp LBRC        &kp RBRC &kp PIPE &none
                           &mt LSHIFT TAB  &mt LCTRL LGUI  &kp SPACE             &kp RET   &mt LALT BKSP &kp APOS
                        >;
                };
        };
};
